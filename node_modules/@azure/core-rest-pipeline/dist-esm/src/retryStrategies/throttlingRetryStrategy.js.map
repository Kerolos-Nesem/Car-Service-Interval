{"version":3,"file":"throttlingRetryStrategy.js","sourceRoot":"","sources":["../../../src/retryStrategies/throttlingRetryStrategy.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAKlC;;;;GAIG;AACH,SAAS,qBAAqB,CAAC,WAAmB;IAChD,IAAI;QACF,MAAM,mBAAmB,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;QAChD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,EAAE;YACtC,OAAO,mBAAmB,GAAG,IAAI,CAAC;SACnC;aAAM;YACL,iEAAiE;YAEjE,MAAM,GAAG,GAAW,IAAI,CAAC,GAAG,EAAE,CAAC;YAC/B,MAAM,IAAI,GAAW,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YAC7C,MAAM,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC;YAExB,OAAO,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC;SAC9C;KACF;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,SAAS,CAAC;KAClB;AACH,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,yBAAyB,CAAC,QAA2B;IACnE,OAAO,OAAO,CACZ,QAAQ;QACN,CAAC,QAAQ,CAAC,MAAM,KAAK,GAAG,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,CAAC;QACpD,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC;QACnC,qBAAqB,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAE,CAAC,CAC9D,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,uBAAuB;IACrC,OAAO;QACL,IAAI,EAAE,yBAAyB;QAC/B,KAAK,CAAC,EAAE,QAAQ,EAAE;YAChB,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,EAAE;gBACxC,OAAO,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;aAC/B;YACD,OAAO;gBACL,cAAc,EAAE,qBAAqB,CAAC,QAAS,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAE,CAAC;aAC7E,CAAC;QACJ,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelineResponse } from \"..\";\nimport { RetryStrategy } from \"./retryStrategy\";\n\n/**\n * Returns the number of milliseconds to wait based on a Retry-After header value.\n * Returns undefined if there is no valid value.\n * @param headerValue - An HTTP Retry-After header value.\n */\nfunction parseRetryAfterHeader(headerValue: string): number | undefined {\n  try {\n    const retryAfterInSeconds = Number(headerValue);\n    if (!Number.isNaN(retryAfterInSeconds)) {\n      return retryAfterInSeconds * 1000;\n    } else {\n      // It might be formatted as a date instead of a number of seconds\n\n      const now: number = Date.now();\n      const date: number = Date.parse(headerValue);\n      const diff = date - now;\n\n      return Number.isNaN(diff) ? undefined : diff;\n    }\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/**\n * A response is a retry response if it has a throttling status code (429 or 503),\n * as long as the Retry-After header has a valid value.\n */\nexport function isThrottlingRetryResponse(response?: PipelineResponse): boolean {\n  return Boolean(\n    response &&\n      (response.status === 429 || response.status === 503) &&\n      response.headers.get(\"Retry-After\") &&\n      parseRetryAfterHeader(response.headers.get(\"Retry-After\")!)\n  );\n}\n\nexport function throttlingRetryStrategy(): RetryStrategy {\n  return {\n    name: \"throttlingRetryStrategy\",\n    retry({ response }) {\n      if (!isThrottlingRetryResponse(response)) {\n        return { skipStrategy: true };\n      }\n      return {\n        retryAfterInMs: parseRetryAfterHeader(response!.headers.get(\"Retry-After\")!),\n      };\n    },\n  };\n}\n"]}